digraph "CollidedWith"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{CollidedWith\n|+ const bool justCollided\l+ bool cancelled\l+ Vector3 translationVector\l+ Vector3 normal\l|+  CollidedWith(Entity\l *attacker, Entity *victim,\l bool justCollided, Vector3\l translationVector, Vector3 normal)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +attacker\n+victim" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{Entity\n|# std::string name\l# bool dead\l# ENTITYTYPE type\l# bool visible\l# Mtx44 currentMtx\l# bool useNewData\l|+  Entity()\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name)\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name, int health)\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name, Vector3 pos)\l+  ~Entity()\l+ std::string getName()\l+ bool isDead()\l+ void setDead(bool)\l+ EntityData * getEntityData()\l+ EntityData * getOldEntity\lData()\land 16 more...\l# Mtx44 getTRSMtx44()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_entity.html",tooltip="Entity System encapsulating all attributes of something \"Living\"."];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #data\n#oldData" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{EntityData\n|+ Vector3 Translate\l+ Vector3 Rotation\l+ Vector3 Scale\l|+  EntityData()\l+ void setValuesTo(EntityData\l *other)\l+ void SetTransform(float\l x, float y, float z)\l+ void SetScale(float\l x, float y, float z)\l+ void SetRotate(float\l x, float y, float z)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_entity_data.html",tooltip="Handles all World Attributes of an Entity."];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #scene" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{Scene\n|+ MS modelStack\l+ MS viewStack\l+ MS projectionStack\l# unsigned m_vertexArrayID\l# unsigned m_programID\l# std::string sceneName\l# unsigned m_parameters\l# double elapsed\l# bool lightEnable\l|+  Scene()\l+  ~Scene()\l+ void elapser(double dt)\l+ virtual void Init()=0\l+ virtual void Update\l(double dt)=0\l+ virtual void InitLights()=0\l+ virtual void CollisionHandler\l(double dt)=0\l+ virtual void MissionComplete\lListener(double dt)=0\l+ virtual void RenderUI()=0\l+ virtual void Render()=0\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_scene.html",tooltip="Abstract Class of Scenes, used to remove repeate codes from Individual Scenes and make it simpler to ..."];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #hitBox" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{HitBox\n||+  HitBox(Box *box)\l+  ~HitBox()\l+ Box * getThisTickBox()\l+ void update(EntityData\l *data, Mtx44 matrix)\l+ void UpdatePos(Vector3 pos)\l+ void UpdateAxis(Vector3\l xAxis, Vector3 zAxis)\l+ void RotateAxis(float\l degree, Vector3 rotateAxis)\l+ Collider collidedWith\l(HitBox *other)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_hit_box.html",tooltip="HitBox class that handles ALL hitbox updates."];
}
