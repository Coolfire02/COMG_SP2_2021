digraph "SceneHouseFire"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{SceneHouseFire\n|+ bool eHeld\l+ bool arrviedAtFinalSpot\l+ bool houseDestroyed\l|+  SceneHouseFire()\l+  ~SceneHouseFire()\l+ virtual void Init()\l+ virtual void Update\l(double dt)\l+ virtual void InitLights()\l+ virtual void CollisionHandler\l(double dt)\l+ virtual void MissionComplete\lListener(double dt)\l+ virtual void Render()\l+ virtual void Exit()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Starting scene of House on Fire for the Game."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Scene\n|+ MS modelStack\l+ MS viewStack\l+ MS projectionStack\l# unsigned m_vertexArrayID\l# unsigned m_programID\l# std::string sceneName\l# unsigned m_parameters\l# double elapsed\l# bool lightEnable\l|+  Scene()\l+  ~Scene()\l+ void elapser(double dt)\l+ virtual void Init()=0\l+ virtual void Update\l(double dt)=0\l+ virtual void InitLights()=0\l+ virtual void CollisionHandler\l(double dt)=0\l+ virtual void MissionComplete\lListener(double dt)=0\l+ virtual void RenderUI()=0\l+ virtual void Render()=0\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_scene.html",tooltip="Abstract Class of Scenes, used to remove repeate codes from Individual Scenes and make it simpler to ..."];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +eManager" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{EntityManager\n||+  EntityManager(Scene\l *scene)\l+  ~EntityManager()\l+ void spawnMovingEntity\l(Entity *)\l+ void spawnWorldEntity\l(Entity *)\l+ std::vector\< CollidedWith\l * \> & preCollisionUpdate()\l+ void collisionUpdate\l(double dt)\l+ void postCollisionUpdate()\l+ std::vector\< Entity\l * \> getEntities()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_entity_manager.html",tooltip="Scene associated object that handles all Entity in a specific Instance of a Scene...."];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +camera\n+camera2" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{Camera\n|+ CAMERATYPE camType\l+ Vector3 position\l+ Vector3 TPSPositionVector\l+ Vector3 target\l+ Vector3 defaultTarget\l+ Vector3 up\l+ Vector3 defaultUp\l+ float yaw\l+ float pitch\l+ float additionalYaw\l+ float total_pitch\l+ float total_yaw\l|+  Camera()\l+  ~Camera()\l+ void Init(const Vector3\l &pos, const Vector3 &target,\l const Vector3 &up)\l+ void Reset()\l+ void Update(double dt)\l+ bool isLookingAt(Vector3 pos)\l+ void Move(float x,\l float y, float z)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_camera.html",tooltip="Camera System for our game."];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +playerPtr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{Entity\n|# std::string name\l# bool dead\l# ENTITYTYPE type\l# bool visible\l# Mtx44 currentMtx\l# bool useNewData\l|+  Entity()\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name)\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name, int health)\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name, Vector3 pos)\l+  ~Entity()\l+ std::string getName()\l+ bool isDead()\l+ void setDead(bool)\l+ EntityData * getEntityData()\l+ EntityData * getOldEntity\lData()\land 16 more...\l# Mtx44 getTRSMtx44()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_entity.html",tooltip="Entity System encapsulating all attributes of something \"Living\"."];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" #data\n#oldData" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{EntityData\n|+ Vector3 Translate\l+ Vector3 Rotation\l+ Vector3 Scale\l|+  EntityData()\l+ void setValuesTo(EntityData\l *other)\l+ void SetTransform(float\l x, float y, float z)\l+ void SetScale(float\l x, float y, float z)\l+ void SetRotate(float\l x, float y, float z)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_entity_data.html",tooltip="Handles all World Attributes of an Entity."];
  Node2 -> Node5 [color="grey25",fontsize="10",style="solid",label=" #scene" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 -> Node5 [color="grey25",fontsize="10",style="solid",label=" #hitBox" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{HitBox\n||+  HitBox(Box *box)\l+  ~HitBox()\l+ Box * getThisTickBox()\l+ void update(EntityData\l *data, Mtx44 matrix)\l+ void UpdatePos(Vector3 pos)\l+ void UpdateAxis(Vector3\l xAxis, Vector3 zAxis)\l+ void RotateAxis(float\l degree, Vector3 rotateAxis)\l+ Collider collidedWith\l(HitBox *other)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_hit_box.html",tooltip="HitBox class that handles ALL hitbox updates."];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +player" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{Player\n||+  Player(Scene *scene,\l Vector3 position, std\l::string)\l+  ~Player()\l+ bool isDriving()\l+ void setDriving(Car\l *, bool)\l+ Car * getCar()\l+ void Update(double)\l+ void Render()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_player.html",tooltip="Handles all Players functionalities."];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +car" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{Car\n||+  Car(CAR_TYPE, Scene\l *, std::string)\l+  Car(float, CAR_TYPE)\l+  Car()\l+  ~Car()\l+ void Init(CAR_TYPE\l type, Scene *scene,\l std::string name)\l+ void setSpeed(float\l speed)\l+ void setAccel(float a)\l+ void setVelocity(Vector3)\l+ void setPlayer(Player *)\l+ float getAccel()\land 8 more...\l+ static float getMaxCarSpeed\l(CAR_TYPE carType)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_car.html",tooltip="Car class for car movement."];
  Node5 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
}
