digraph "ButtonCollide"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ButtonCollide\n|+ bool justClicked\l+ bool isClicking\l+ int clickTally\l+ float firstInteractTime\l+ float lastClickedTime\l+ bool justHovered\l+ const bool hovering\l|+  ButtonCollide(Button\l *button, float firstInteract)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +buttonClicked" ,arrowhead="odiamond"];
  Node2 [label="{Button\n||+  Button(std::string\l buttonName, float originX,\l float originY, float quadXSize,\l float quadYSize, GEOMETRY_TYPE\l quadTexture)\l+ void spawnTextObject\l(std::string text, Color\l txtColor, FONTTYPE type,\l float textSize)\l+ void disable()\l+ void enable()\l+ bool isEnabled()\l+ std::string getName()\l+ bool hasText()\l+ bool isInRange(double,\l double)\l+ void setOrigin(float\l x, float Y)\l+ UIItem getUIInfo()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_button.html",tooltip="Buttons creatable for UI. Used by ButtonManager."];
}
