digraph "Application"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Application\n|+ static bool cursorEnabled\l+ static unsigned m_width\l+ static unsigned m_height\l+ static double mouse\l_last_x\l+ static double mouse\l_last_y\l+ static double mouse\l_current_x\l+ static double mouse\l_current_y\l+ static double mouse\l_diff_x\l+ static double mouse\l_diff_y\l+ static double camera_yaw\l+ static double camera\l_pitch\l+ static const int m\l_window_deadzone\l+ static const int m\l_window_width\l+ static const int m\l_window_height\l|+  Application()\l+  ~Application()\l+ void Init()\l+ void Run()\l+ void Exit()\l+ bool GetMouseUpdate()\l+ static bool IsKeyPressed\l(unsigned short key)\l+ static bool changeToScene\l(std::string, std::string)\l+ static void setCursorEnabled\l(bool enabled)\l+ static Scene * getSceneBy\lName(std::string)\l+ static bool IsMousePressed\l(unsigned short key)\l+ static bool IsKeyReleased\l(unsigned short key)\l+ static void GetCursorPos\l(double *xpos, double *ypos)\l+ static int GetWindowWidth()\l+ static int GetWindowHeight()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Handles the entire applciation."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +g" ,arrowhead="odiamond"];
  Node2 [label="{Game\n|+ static bool killedBimster\l+ static int BimsterSavePoints\l+ static bool settings\l+ static float FPS\l+ static double sceneCooldown\l+ static SCENES activeScene\l+ static std::vector\l\< Scene * \> SceneList\l+ static int ammo\l+ static int cash\l+ static double gElapsedTime\l+ static bool gameExit\l|+  Game()\l+  ~Game()\l+ static void Init()\l+ static void Update\l(double dt)\l+ static void InteractionUpdate\l(double dt)\l+ static void RenderUI()\l+ static void Render()\l+ static void Exit()\l+ static void setAmmo(int)\l+ static int getAmmo()\l+ static void addScene\l(Scene *scene)\l+ static void switchScene\l(static SCENES)\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_game.html",tooltip="Handles the entire Game. (Scenes, Settings, Managers, etc.)"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +uiManager" ,arrowhead="odiamond"];
  Node3 [label="{UIManager\n||+  UIManager()\l+  ~UIManager()\l+ void Init()\l+ void Update(Scene *scene,\l double dt)\l+ void enableUI()\l+ void disableUI()\l+ void Render(Scene *scene)\l+ void changeTextButton\l(std::string newText,\l std::string bName)\l+ void createTextButton\l(ButtonManager *bManager,\l std::string buttonName,\l float originX, float originY,\l float quadSizeX, float quadSizeY,\l float offsetX, float offsetY, Color\l textColour, std::string textString,\l float textSize)\l+ void createTextButton\l(ButtonManager *bManager,\l std::string buttonName,\l float originX, float originY,\l float quadSizeX, float quadSizeY,\l float offsetX, float offsetY, Color\l textColour, std::string textString,\l float textSize, FONTTYPE type)\land 11 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_u_i_manager.html",tooltip="Handles all UIs with Buttons in the Game."];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +inv" ,arrowhead="odiamond"];
  Node4 [label="{Inventory\n||+  Inventory()\l+  ~Inventory()\l+ void addWeap(WEAPON\l_TYPE weapontype)\l+ void addCar(CAR_TYPE\l cartype)\l+ void addItem(ITEM_TYPE\l itemtype, int amt)\l+ void changeItemAmt\l(ITEM_TYPE itemtype,\l int amt)\l+ void deleteItem(ITEM\l_TYPE itemtype)\l+ void deleteWeapon(WEAPON\l_TYPE wType)\l+ void switchCar(int\l cartype)\l+ void switchWeapon(int\l index)\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_inventory.html",tooltip="Manager for all Inventories associated with Player."];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +iManager" ,arrowhead="odiamond"];
  Node5 [label="{InteractionManager\n||+  InteractionManager()\l+  ~InteractionManager()\l+ int getTimesInteracted\l(std::string interactionID)\l+ InteractionQueue &\l getQueue()\l+ bool runCommand(Command cmd)\l+ bool loadInteraction\l(std::string key)\l+ bool initInteractions\l(const char *filePath)\l+ void split(std::string\l txt, char delim, std\l::vector\< std::string \> &out)\l+ void EndInteraction()\l+ void nextInteraction\l(std::string key)\l+ bool isInteracting()\l+ bool passedInteractionCooldown()\l+ void Update(double)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_interaction_manager.html",tooltip="Manager to handle the interactions in a map and active interactions using a queue."];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +mManager" ,arrowhead="odiamond"];
  Node6 [label="{MissionManager\n||+  MissionManager()\l+  ~MissionManager()\l+ std::vector\< MISSIONTYPE\l \> getCompletedMissions()\l+ std::vector\< MISSIONTYPE\l \> getCompletableMissions()\l+ bool missionIsCompletable\l(MISSIONTYPE type, std\l::vector\< MISSIONTYPE \>\l &completable)\l+ bool addProgress(MISSIONTYPE\l type, float progress)\l+ bool setProgress(MISSIONTYPE\l type, float progress)\l+ void addUnsafeProgress\l(MISSIONTYPE type, float\l progress)\l+ float getMissionProgress\l(MISSIONTYPE type)\l+ void Update(double dt)\l+ std::vector\< Mission\l * \> getJustCompletedMissions()\l+ static void loadMissionLang()\l+ static MISSIONTYPE\l getMissionByEnumName\l(std::string name)\l+ static std::string\l getMissionNameFormatted\l(MISSIONTYPE type)\l+ static void split(std\l::string txt, char delim,\l std::vector\< std::string\l \> &out)\l+ static std::string\l stringTrim(std::string str)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_mission_manager.html",tooltip="Handles all Missions in the Game."];
}
