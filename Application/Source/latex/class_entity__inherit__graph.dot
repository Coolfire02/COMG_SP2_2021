digraph "Entity"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Entity\n|# Scene * scene\l# std::string name\l# bool dead\l# ENTITYTYPE type\l# EntityData * data\l# EntityData * oldData\l# bool visible\l# Mtx44 currentMtx\l# bool useNewData\l# HitBox * hitBox\l|+  Entity()\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name)\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name, int health)\l+  Entity(Scene *associated\lScene, ENTITYTYPE type,\l std::string name, Vector3 pos)\l+  ~Entity()\l+ std::string getName()\l+ bool isDead()\l+ void setDead(bool)\l+ EntityData * getEntityData()\l+ EntityData * getOldEntity\lData()\land 16 more...\l# Mtx44 getTRSMtx44()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Entity System encapsulating all attributes of something \"Living\"."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{Bullet\n||+  Bullet()\l+  Bullet(Scene *, BULLET\l_TYPE, Vector3, std::string)\l+  ~Bullet()\l+ Vector3 getVelocity()\l+ double getTimer()\l+ void Update(double dt)\l+ void Move(double dt)\l+ void Render()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_bullet.html",tooltip="Handles the Bullet Entity in our Game."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node3 [label="{Car\n||+  Car(CAR_TYPE, Scene\l *, std::string)\l+  Car(float, CAR_TYPE)\l+  Car()\l+  ~Car()\l+ void Init(CAR_TYPE\l type, Scene *scene,\l std::string name)\l+ void setSpeed(float\l speed)\l+ void setAccel(float a)\l+ void setVelocity(Vector3)\l+ void setPlayer(Player *)\l+ float getAccel()\land 8 more...\l+ static float getMaxCarSpeed\l(CAR_TYPE carType)\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_car.html",tooltip="Car class for car movement."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{CustomEntity\n||+  CustomEntity(Scene\l *, Box *, std::string)\l+  ~CustomEntity()\l+ void Update(double)\l+ void Render()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_custom_entity.html",tooltip="Sub-Type of an Entity. Usually used to create Interaction Zones in the world by spawning a Custom Ent..."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node5 [label="{NPC\n||+ NPCTYPE getNPCType()\l+  NPC(Scene *, NPCTYPE,\l std::string, int)\l+  ~NPC()\l+ bool getSemiCollision()\l+ RigidBody & getRigidBody()\l+ void Update(double)\l+ void Render()\l+ void Walk(double)\l+ int getID()\l+ std::vector\< int \>\l & getIDList()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_n_p_c.html",tooltip="NPC class that will involve interactable and non-interactable NPCs."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node6 [label="{Player\n||+  Player(Scene *scene,\l Vector3 position, std\l::string)\l+  ~Player()\l+ bool isDriving()\l+ void setDriving(Car\l *, bool)\l+ Car * getCar()\l+ void Update(double)\l+ void Render()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_player.html",tooltip="Handles all Players functionalities."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node7 [label="{WorldObject\n||+  WorldObject(Scene\l *, GEOMETRY_TYPE, std\l::string)\l+  ~WorldObject()\l+ void Update(double)\l+ void Render()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_world_object.html",tooltip="WorldObject Entity usually used for Buildings, Trees etc."];
}
